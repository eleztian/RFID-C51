C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE RC522.C OPTIMIZE(8,SPEED) BROWSE

line level    source

   1          #include <intrins.h>
   2          #include "reg52.h"
   3          #include "main.h"
   4          #include "mfrc522.h"
   5          #include <string.h> 
   6          #define MAXRLEN 18                        
   7          /////////////////////////////////////////////////////////////////////
   8          //功    能：寻卡
   9          //参数说明: req_code[IN]:寻卡方式
  10          //                0x52 = 寻感应区内所有符合14443A标准的卡
  11          //                0x26 = 寻未进入休眠状态的卡
  12          //          pTagType[OUT]：卡片类型代码
  13          //                0x4400 = Mifare_UltraLight
  14          //                0x0400 = Mifare_One(S50)
  15          //                0x0200 = Mifare_One(S70)
  16          //                0x0800 = Mifare_Pro(X)
  17          //                0x4403 = Mifare_DESFire
  18          //返    回: 成功返回MI_OK
  19          /////////////////////////////////////////////////////////////////////
  20          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  21          {
  22   1         char status;  
  23   1         unsigned int  unLen;
  24   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  25   1      //  unsigned char xTest ;
  26   1         ClearBitMask(Status2Reg,0x08);
  27   1         WriteRawRC(BitFramingReg,0x07);
  28   1      
  29   1      //  xTest = ReadRawRC(BitFramingReg);
  30   1      //  if(xTest == 0x07 )
  31   1       //   { LED_GREEN  =0 ;}
  32   1       // else {LED_GREEN =1 ;while(1){}}
  33   1         SetBitMask(TxControlReg,0x03);
  34   1       
  35   1         ucComMF522Buf[0] = req_code;
  36   1      
  37   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  38   1      //     if(status  == MI_OK )
  39   1      //   { LED_GREEN  =0 ;}
  40   1      //   else {LED_GREEN =1 ;}
  41   1         if ((status == MI_OK) && (unLen == 0x10))
  42   1         {    
  43   2              
  44   2             *pTagType     =  ucComMF522Buf[0];
  45   2             *(pTagType+1) = ucComMF522Buf[1];
  46   2         }
  47   1         else
  48   1         {   status = MI_ERR;   }
  49   1         
  50   1         return status;
  51   1      }
  52          
  53          /////////////////////////////////////////////////////////////////////
  54          //功    能：防冲撞
  55          //参数说明: pSnr[OUT]:卡片序列号，4字节
C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 2   

  56          //返    回: 成功返回MI_OK
  57          /////////////////////////////////////////////////////////////////////  
  58          char PcdAnticoll(unsigned char *pSnr)
  59          {
  60   1          char status;
  61   1          unsigned char i,snr_check=0;
  62   1          unsigned int  unLen;
  63   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  64   1          
  65   1      
  66   1          ClearBitMask(Status2Reg,0x08);
  67   1          WriteRawRC(BitFramingReg,0x00);
  68   1          ClearBitMask(CollReg,0x80);
  69   1       
  70   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  71   1          ucComMF522Buf[1] = 0x20;
  72   1      
  73   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  74   1      
  75   1          if (status == MI_OK)
  76   1          {
  77   2               for (i=0; i<4; i++)
  78   2               {   
  79   3                   *(pSnr+i)  = ucComMF522Buf[i];
  80   3                   snr_check ^= ucComMF522Buf[i];
  81   3               }
  82   2               if (snr_check != ucComMF522Buf[i])
  83   2               {   status = MI_ERR;    }
  84   2          }
  85   1          
  86   1          SetBitMask(CollReg,0x80);
  87   1          return status;
  88   1      }
  89          
  90          /////////////////////////////////////////////////////////////////////
  91          //功    能：命令卡片进入休眠状态
  92          //返    回: 成功返回MI_OK
  93          /////////////////////////////////////////////////////////////////////
  94          char PcdHalt(void)
  95          {
  96   1          char status;
  97   1          unsigned int  unLen;
  98   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  99   1      
 100   1          ucComMF522Buf[0] = PICC_HALT;
 101   1          ucComMF522Buf[1] = 0;
 102   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 103   1       
 104   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 105   1      
 106   1          return MI_OK;
 107   1      }
 108          
 109          /////////////////////////////////////////////////////////////////////
 110          //用MF522计算CRC16函数
 111          /////////////////////////////////////////////////////////////////////
 112          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 113          {
 114   1          unsigned char i,n;
 115   1          ClearBitMask(DivIrqReg,0x04);
 116   1          WriteRawRC(CommandReg,PCD_IDLE);
 117   1          SetBitMask(FIFOLevelReg,0x80);
C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 3   

 118   1          for (i=0; i<len; i++)
 119   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 120   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 121   1          i = 0xFF;
 122   1          do 
 123   1          {
 124   2              n = ReadRawRC(DivIrqReg);
 125   2              i--;
 126   2          }
 127   1          while ((i!=0) && !(n&0x04));
 128   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 129   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 130   1      }
 131          
 132          /////////////////////////////////////////////////////////////////////
 133          //功    能：复位RC522
 134          //返    回: 成功返回MI_OK
 135          /////////////////////////////////////////////////////////////////////
 136          char PcdReset(void)
 137          {
 138   1          MF522_RST=1;
 139   1          _nop_();
 140   1          MF522_RST=0;
 141   1          _nop_();
 142   1          MF522_RST=1;
 143   1           _nop_();
 144   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 145   1          _nop_();
 146   1          
 147   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 148   1          WriteRawRC(TReloadRegL,30);           
 149   1          WriteRawRC(TReloadRegH,0);
 150   1          WriteRawRC(TModeReg,0x8D);
 151   1          WriteRawRC(TPrescalerReg,0x3E);
 152   1          WriteRawRC(TxAutoReg,0x40);     
 153   1          return MI_OK;
 154   1      }
 155          //////////////////////////////////////////////////////////////////////
 156          //设置RC632的工作方式 
 157          //////////////////////////////////////////////////////////////////////
 158          char M500PcdConfigISOType(unsigned char type)
 159          {
 160   1         if (type == 'A')                     //ISO14443_A
 161   1         { 
 162   2             ClearBitMask(Status2Reg,0x08);
 163   2      
 164   2       /*     WriteRawRC(CommandReg,0x20);    //as default   
 165   2             WriteRawRC(ComIEnReg,0x80);     //as default
 166   2             WriteRawRC(DivlEnReg,0x0);      //as default
 167   2                 WriteRawRC(ComIrqReg,0x04);     //as default
 168   2                 WriteRawRC(DivIrqReg,0x0);      //as default
 169   2                 WriteRawRC(Status2Reg,0x0);//80    //trun off temperature sensor
 170   2                 WriteRawRC(WaterLevelReg,0x08); //as default
 171   2             WriteRawRC(ControlReg,0x20);    //as default
 172   2                 WriteRawRC(CollReg,0x80);    //as default
 173   2      */
 174   2             WriteRawRC(ModeReg,0x3D);//3F
 175   2      /*         WriteRawRC(TxModeReg,0x0);      //as default???
 176   2                 WriteRawRC(RxModeReg,0x0);      //as default???
 177   2                 WriteRawRC(TxControlReg,0x80);  //as default???
 178   2      
 179   2                 WriteRawRC(TxSelReg,0x10);      //as default???
C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 4   

 180   2         */
 181   2             WriteRawRC(RxSelReg,0x86);//84
 182   2       //      WriteRawRC(RxThresholdReg,0x84);//as default
 183   2       //      WriteRawRC(DemodReg,0x4D);      //as default
 184   2      
 185   2       //      WriteRawRC(ModWidthReg,0x13);//26
 186   2             WriteRawRC(RFCfgReg,0x7F);   //4F
 187   2              /*   WriteRawRC(GsNReg,0x88);        //as default???
 188   2                 WriteRawRC(CWGsCfgReg,0x20);    //as default???
 189   2             WriteRawRC(ModGsCfgReg,0x20);   //as default???
 190   2      */
 191   2                 WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
 192   2                 WriteRawRC(TReloadRegH,0);
 193   2             WriteRawRC(TModeReg,0x8D);
 194   2                 WriteRawRC(TPrescalerReg,0x3E);
 195   2                 
 196   2      
 197   2        //     PcdSetTmo(106);
 198   2                              delay_10ms(1);
 199   2             PcdAntennaOn();
 200   2         }
 201   1         else{ return -1; }
 202   1         
 203   1         return MI_OK;
 204   1      }
 205          /////////////////////////////////////////////////////////////////////
 206          //功    能：读RC632寄存器
 207          //参数说明：Address[IN]:寄存器地址
 208          //返    回：读出的值
 209          /////////////////////////////////////////////////////////////////////
 210          unsigned char ReadRawRC(unsigned char Address)
 211          {
 212   1           unsigned char i, ucAddr;
 213   1           unsigned char ucResult=0;
 214   1      
 215   1           MF522_SCK = 0;
 216   1           MF522_NSS = 0;
 217   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 218   1      
 219   1           for(i=8;i>0;i--)
 220   1           {
 221   2               MF522_SI = ((ucAddr&0x80)==0x80);
 222   2               MF522_SCK = 1;
 223   2               ucAddr <<= 1;
 224   2               MF522_SCK = 0;
 225   2           }
 226   1      
 227   1           for(i=8;i>0;i--)
 228   1           {
 229   2               MF522_SCK = 1;
 230   2               ucResult <<= 1;
 231   2               ucResult|=(bit)MF522_SO;
 232   2               MF522_SCK = 0;
 233   2           }
 234   1      
 235   1           MF522_NSS = 1;
 236   1           MF522_SCK = 1;
 237   1           return ucResult;
 238   1      }
 239          
 240          /////////////////////////////////////////////////////////////////////
 241          //功    能：写RC632寄存器
C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 5   

 242          //参数说明：Address[IN]:寄存器地址
 243          //          value[IN]:写入的值
 244          /////////////////////////////////////////////////////////////////////
 245          void WriteRawRC(unsigned char Address, unsigned char value)
 246          {  
 247   1          unsigned char i, ucAddr;
 248   1      
 249   1          MF522_SCK = 0;
 250   1          MF522_NSS = 0;
 251   1          ucAddr = ((Address<<1)&0x7E);
 252   1      
 253   1          for(i=8;i>0;i--)
 254   1          {
 255   2              MF522_SI = ((ucAddr&0x80)==0x80);
 256   2              MF522_SCK = 1;
 257   2              ucAddr <<= 1;
 258   2              MF522_SCK = 0;
 259   2          }
 260   1      
 261   1          for(i=8;i>0;i--)
 262   1          {
 263   2              MF522_SI = ((value&0x80)==0x80);
 264   2              MF522_SCK = 1;
 265   2              value <<= 1;
 266   2              MF522_SCK = 0;
 267   2          }
 268   1          MF522_NSS = 1;
 269   1          MF522_SCK = 1;
 270   1      }
 271          
 272          /////////////////////////////////////////////////////////////////////
 273          //功    能：置RC522寄存器位
 274          //参数说明：reg[IN]:寄存器地址
 275          //          mask[IN]:置位值
 276          /////////////////////////////////////////////////////////////////////
 277          void SetBitMask(unsigned char reg,unsigned char mask)  
 278          {
 279   1          char tmp = 0x0;
 280   1          tmp = ReadRawRC(reg);
 281   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 282   1      }
 283          
 284          /////////////////////////////////////////////////////////////////////
 285          //功    能：清RC522寄存器位
 286          //参数说明：reg[IN]:寄存器地址
 287          //          mask[IN]:清位值
 288          /////////////////////////////////////////////////////////////////////
 289          void ClearBitMask(unsigned char reg,unsigned char mask)  
 290          {
 291   1          char tmp = 0x0;
 292   1          tmp = ReadRawRC(reg);
 293   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 294   1      } 
 295          
 296          /////////////////////////////////////////////////////////////////////
 297          //功    能：通过RC522和ISO14443卡通讯
 298          //参数说明：Command[IN]:RC522命令字
 299          //          pInData[IN]:通过RC522发送到卡片的数据
 300          //          InLenByte[IN]:发送数据的字节长度
 301          //          pOutData[OUT]:接收到的卡片返回数据
 302          //          *pOutLenBit[OUT]:返回数据的位长度
 303          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 6   

 304          char PcdComMF522(unsigned char Command, 
 305                           unsigned char *pInData, 
 306                           unsigned char InLenByte,
 307                           unsigned char *pOutData, 
 308                           unsigned int  *pOutLenBit)                                                                        
 309          {
 310   1          char status = MI_ERR; ////status赋2
 311   1          unsigned char irqEn   = 0x00;
 312   1          unsigned char waitFor = 0x00;
 313   1          unsigned char lastBits;
 314   1          unsigned char n;
 315   1          unsigned int i;
 316   1          switch (Command)
 317   1          {
 318   2             case PCD_AUTHENT:   ////验证密钥
 319   2                irqEn   = 0x12;
 320   2                waitFor = 0x10;
 321   2                break;
 322   2             case PCD_TRANSCEIVE:     // //发送并接收数据
 323   2                irqEn   = 0x77;
 324   2                waitFor = 0x30;
 325   2                break;
 326   2             default:
 327   2               break;
 328   2          }
 329   1         
 330   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 331   1          ClearBitMask(ComIrqReg,0x80);
 332   1          WriteRawRC(CommandReg,PCD_IDLE);  // //取消当前命令
 333   1          SetBitMask(FIFOLevelReg,0x80);
 334   1          
 335   1          for (i=0; i<InLenByte; i++)
 336   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 337   1          WriteRawRC(CommandReg, Command);
 338   1         
 339   1          
 340   1          if (Command == PCD_TRANSCEIVE)
 341   1          {    SetBitMask(BitFramingReg,0x80);  }
 342   1          
 343   1      //    i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 344   1       i = 2000;
 345   1          do 
 346   1          {
 347   2               n = ReadRawRC(ComIrqReg);
 348   2               i--;
 349   2          }
 350   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 351   1          ClearBitMask(BitFramingReg,0x80);
 352   1                    
 353   1          if (i!=0)
 354   1          {    
 355   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 356   2               {
 357   3                   status = MI_OK;
 358   3                   if (n & irqEn & 0x01)
 359   3                   {   status = MI_NOTAGERR;   }
 360   3                   if (Command == PCD_TRANSCEIVE)
 361   3                   {
 362   4                      n = ReadRawRC(FIFOLevelReg);
 363   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 364   4                      if (lastBits)
 365   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 7   

 366   4                      else
 367   4                      {   *pOutLenBit = n*8;   }
 368   4                      if (n == 0)
 369   4                      {   n = 1;    }
 370   4                      if (n > MAXRLEN)
 371   4                      {   n = MAXRLEN;   }
 372   4                      for (i=0; i<n; i++)
 373   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 374   4                  }
 375   3               }
 376   2               else
 377   2               {   status = MI_ERR;   }
 378   2              
 379   2         }
 380   1         
 381   1      
 382   1         SetBitMask(ControlReg,0x80);           // stop timer now
 383   1         WriteRawRC(CommandReg,PCD_IDLE); 
 384   1         return status;
 385   1      }
 386          
 387          
 388          /////////////////////////////////////////////////////////////////////
 389          //开启天线  
 390          //每次启动或关闭天险发射之间应至少有1ms的间隔
 391          /////////////////////////////////////////////////////////////////////
 392          void PcdAntennaOn()
 393          {
 394   1          unsigned char i;
 395   1          i = ReadRawRC(TxControlReg);
 396   1          if (!(i & 0x03))
 397   1          {
 398   2              SetBitMask(TxControlReg, 0x03);
 399   2          }
 400   1      }
 401          
 402          
 403          /////////////////////////////////////////////////////////////////////
 404          //关闭天线
 405          /////////////////////////////////////////////////////////////////////
 406          void PcdAntennaOff()
 407          {
 408   1          ClearBitMask(TxControlReg, 0x03);
 409   1      }
 410          
 411          
 412          ///////////////////////////////////////////////////////////////////////
 413          // Delay 10ms
 414          ///////////////////////////////////////////////////////////////////////
 415          void delay_10ms(unsigned int _10ms)
 416          {
 417   1      #ifndef NO_TIMER2
 418   1          RCAP2LH = RCAP2_10ms;
 419   1          T2LH    = RCAP2_10ms;
 420   1          
 421   1          TR2 = TRUE;
 422   1          while (_10ms--)
 423   1          {
 424   2                  while (!TF2);
 425   2                  TF2 = FALSE;
 426   2          }
 427   1          TR2 = FALSE;
C51 COMPILER V9.54   RC522                                                                 03/02/2017 14:15:52 PAGE 8   

 428   1      #else
                  while (_10ms--)
                  {
                          delay_50us(19);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid )
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(19);
                          if (CmdValid)
                              return;
                  }
              #endif
 463   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1126    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      95
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
